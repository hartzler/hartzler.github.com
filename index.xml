<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cryptopanic!</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on cryptopanic!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <lastBuildDate>Sun, 11 Jan 2015 08:44:21 CST</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 11 Jan 2015 08:44:21 CST</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;Matt Hartzler is an entrepreneur and programmer currently living in Minnesota.&lt;/p&gt;

&lt;h3 id=&#34;projects:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Projects&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tykeal/TykeBot&#34;&gt;https://github.com/tykeal/TykeBot&lt;/a&gt; - xmpp chat bot&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://936months.appspot.com&#34;&gt;http://936months.appspot.com&lt;/a&gt; - cute life visualization&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;contact:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Contact&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hartzler&#34;&gt;github&lt;/a&gt;
&lt;a href=&#34;http://twitter.com/hartzler&#34;&gt;@hartzler&lt;/a&gt;
&lt;a href=&#34;https://www.facebook.com/hartzler.matt&#34;&gt;facebook&lt;/a&gt;
&lt;a href=&#34;https://keybase.io/hartzler&#34;&gt;keybase&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;pgp:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;PGP&lt;/h3&gt;

&lt;p&gt;hartzler at cryptopanic dot org&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1

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
M9msqWcQuyNjVLz4YxZLMcmxRyk=
=uxlH
-----END PGP PUBLIC KEY BLOCK-----
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retry with Timeout</title>
      <link>http://localhost:1313/blog/retry_with_timeout/</link>
      <pubDate>Fri, 12 Dec 2014 08:50:11 CST</pubDate>
      
      <guid>http://localhost:1313/blog/retry_with_timeout/</guid>
      <description>&lt;p&gt;Retry with timeout can be a tricky little function to get right.  Here I want to highlight go&amp;rsquo;s select statement which makes short work of what can be a tangled code path in many other languages.&lt;/p&gt;

&lt;p&gt;While checking out hashicorp&amp;rsquo;s excellent &lt;a href=&#34;https://github.com/hashicorp/terraform&#34;&gt;terraform&lt;/a&gt; I noticed this gem:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// retryFunc is used to retry a function for a given duration
func retryFunc(timeout time.Duration, f func() error) error {
	finish := time.After(timeout)
	for {
		err := f()
		if err == nil {
			return nil
		}
		log.Printf(&amp;quot;Retryable error: %v&amp;quot;, err)

		select {
		case &amp;lt;-finish:
			return err
		case &amp;lt;-time.After(3 * time.Second):
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The stdlib time package has an After method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;time.After(timeout)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which creates a channel that will be closed after a given duration.  Go&amp;rsquo;s select lets you wait on several channels at the same time which is used here to return after the passed duration or continue the loop after 3 seconds.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>