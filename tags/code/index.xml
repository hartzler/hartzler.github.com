<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on cryptopanic!</title>
    <link>http://localhost:1313/tags/code/</link>
    <description>Recent content in Code on cryptopanic!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <lastBuildDate>Fri, 12 Dec 2014 08:50:11 CST</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/code/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Retry with Timeout</title>
      <link>http://localhost:1313/blog/retry_with_timeout/</link>
      <pubDate>Fri, 12 Dec 2014 08:50:11 CST</pubDate>
      
      <guid>http://localhost:1313/blog/retry_with_timeout/</guid>
      <description>&lt;p&gt;Retry with timeout can be a tricky little function to get right.  Here I want to highlight go&amp;rsquo;s select statement which makes short work of what can be a tangled code path in many other languages.&lt;/p&gt;

&lt;p&gt;While checking out hashicorp&amp;rsquo;s excellent &lt;a href=&#34;https://github.com/hashicorp/terraform&#34;&gt;terraform&lt;/a&gt; I noticed this gem:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// retryFunc is used to retry a function for a given duration
func retryFunc(timeout time.Duration, f func() error) error {
	finish := time.After(timeout)
	for {
		err := f()
		if err == nil {
			return nil
		}
		log.Printf(&amp;quot;Retryable error: %v&amp;quot;, err)

		select {
		case &amp;lt;-finish:
			return err
		case &amp;lt;-time.After(3 * time.Second):
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The stdlib time package has an After method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;time.After(timeout)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which creates a channel that will be closed after a given duration.  Go&amp;rsquo;s select lets you wait on several channels at the same time which is used here to return after the passed duration or continue the loop after 3 seconds.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>